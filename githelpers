#!/usr/bin/env zsh

# Log output:
#
# * 51c333e    (12 days)    <Gary Bernhardt>   add vim-eunuch
#
# The time massaging regexes start with ^[^<]* because that ensures that they
# only operate before the first "<". That "<" will be the beginning of the
# author name, ensuring that we don't destroy anything in the commit message
# that looks like time.
#
# The log format uses } characters between each field, and `column` is later
# used to split on them. A } in the commit subject or any other field will
# break this.

HASH="%C(yellow)%h%Creset"
RELATIVE_TIME="%Cgreen(%ai)%Creset"
AUTHOR="%C(bold blue)<%an>%Creset"
REFS="%C(red)%d%Creset"
SUBJECT="%s"

FORMAT="$HASH}$RELATIVE_TIME}$AUTHOR}$REFS $SUBJECT"

show_git_head() {
    pretty_git_log -1
    git show -p --pretty="tformat:"
}

pretty_git_log() {
    git log --graph --abbrev-commit --pretty="tformat:${FORMAT}" $* |
        # Repalce (2 years ago) with (2 years)
        # Replace (2 years, 5 months) with (2 years)
        # sed -Ee 's/(^[^<]*) ago\)/\1)/' -e 's/(^[^<]*), [[:digit:]]+ .*months?\)/\1)/' |
        sed -Ee 's/ ([0-9]{2}:[0-9]{2}):[0-9]{2} \+[0-9]{4}/ \1/' |
        # Line columns up based on } delimiter
        column -s '}' -t |
        # Page only if we need to
        less -FXRS
}

# git freeze and thaw
# written by James Macaulay
# https://gist.github.com/jamesmacaulay/582757
freeze() {
    local count=0
    if git commit -m "WIP [STAGED]" > /dev/null; then
        let count+=1
    fi
    git add --all .
    if git commit -m "WIP [UNSTAGED]" > /dev/null; then
        let count+=1
    fi
    if [ $count -eq 0 ]; then
        echo "nothing committed"
    else
        git log -n$count --pretty=format:'%Cgreen%h %Cred%an%Creset: %s'
    fi
}

thaw() {
    if git rev-list HEAD -n1 --pretty="format:%n" | tail -n1 | grep "^WIP \[UNSTAGED\]$" > /dev/null; then
        git reset HEAD^ > /dev/null
    fi
    if git rev-list HEAD -n1 --pretty="format:%n" | tail -n1 | grep "^WIP \[STAGED\]$" > /dev/null; then
        git reset --soft HEAD^ > /dev/null
    fi
    git status --short
}

"$@"

